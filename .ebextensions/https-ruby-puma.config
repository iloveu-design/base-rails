Parameters:
  privatekey: 
    Type: String
    Description: "The path to the private key in Amazon S3"
    Default: "https://elasticbeanstalk-ap-northeast-2--*********.s3.ap-northeast-2.amazonaws.com/privatekey.pem"
  
Resources:
  sslSecurityGroupIngress: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {"Fn::GetAtt" : ["AWSEBSecurityGroup", "GroupId"]}
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
      CidrIp: 0.0.0.0/0
  # Use instance profile to authenticate to S3 bucket that contains the private key
  AWSEBAutoScalingGroup:
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Auth:
          type: "s3"
          buckets: ["elasticbeanstalk-ap-northeast-2-*********"]
          roleName: 
            "Fn::GetOptionSetting": 
              Namespace: "aws:autoscaling:launchconfiguration"
              OptionName: "IamInstanceProfile"
              DefaultValue: "aws-elasticbeanstalk-ec2-role"
files:
  "/etc/pki/tls/certs/server.crt" :
    content: | 
      -----BEGIN CERTIFICATE-----
      
      -----END CERTIFICATE-----


  "/opt/elasticbeanstalk/support/conf/webapp_healthd.conf":
    owner: root
    group: root
    mode: "000644"
    content: |
      upstream my_app {
        server unix:///var/run/puma/my_app.sock;
      }
      
      log_format healthd '$msec"$uri"'
                      '$status"$request_time"$upstream_response_time"'
                      '$http_x_forwarded_for';
      
      server {
        listen 80;
        server_name _ localhost; # need to listen to localhost for worker tier
        set $redirect 0;
        if ($http_x_forwarded_proto != "https") {
          set $redirect 1;
        }
        if ($http_user_agent ~* "ELB-HealthChecker") {
          set $redirect 0;
        }
        if ($redirect = 1) {
          return 301 https://$host$request_uri;
        }  
      }

      server {
        listen       443  ssl;
        server_name  localhost;
        
        ssl_certificate      /etc/pki/tls/certs/server.crt;
        ssl_certificate_key  /etc/pki/tls/certs/server.key;
        
        ssl_session_timeout  5m;
        
        ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_prefer_server_ciphers   on;

        if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2})") {
          set $year $1;
          set $month $2;
          set $day $3;
          set $hour $4;
        }

        access_log  /var/log/nginx/access.log  main;
        access_log /var/log/nginx/healthd/application.log.$year-$month-$day-$hour healthd;

        location / {
          proxy_pass http://my_app; # match the name of upstream directive which is defined above
          proxy_set_header Host $host;
          proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header  X-Forwarded-Proto $scheme;
          proxy_set_header  X-Forwarded-Ssl on; # Optional
          proxy_set_header  X-Forwarded-Port $server_port;
          proxy_set_header  X-Forwarded-Host $host;
        }
      
        location /assets {
          alias /var/app/current/public/assets;
          gzip_static on;
          gzip on;
          expires max;
          add_header Cache-Control public;
        }
      
        location /public {
          alias /var/app/current/public;
          gzip_static on;
          gzip on;
          expires max;
          add_header Cache-Control public;
        }
      }
 
container_commands:
  99_restart_nginx:
    command: "service nginx restart || service nginx start"